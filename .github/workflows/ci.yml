name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  BLOCKPEDIA_SKIP_TEXTURES: 1  # Skip texture downloads in CI

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable'

    - name: Build
      run: cargo build --verbose --all-targets

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Run gradient palette tests
      run: cargo test --test gradient_palettes_test --verbose

    - name: Test with different data source
      run: BLOCKPEDIA_DATA_SOURCE=MCPropertyEncyclopedia cargo test --verbose
      if: matrix.rust == 'stable'

  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: blockpedia-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: blockpedia-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            name: blockpedia-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: blockpedia-macos-aarch64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Build CLI binary
      run: cargo build --release --bin blockpedia-cli --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/blockpedia-cli

    - name: Rename binary
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          mv target/${{ matrix.target }}/release/blockpedia-cli.exe ${{ matrix.name }}
        else
          mv target/${{ matrix.target }}/release/blockpedia-cli ${{ matrix.name }}
        fi

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test,  build-binaries, wasm]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: Get version from Cargo.toml
      id: version
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Check if version tag exists
      id: tag_exists
      run: |
        if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      if: steps.tag_exists.outputs.exists == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          blockpedia-linux-x86_64/blockpedia-linux-x86_64
          blockpedia-windows-x86_64.exe/blockpedia-windows-x86_64.exe
          blockpedia-macos-x86_64/blockpedia-macos-x86_64
          blockpedia-macos-aarch64/blockpedia-macos-aarch64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  wasm:
    name: WASM Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-wasm-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build WASM module
      run: wasm-pack build --target web --features wasm --no-default-features
      env:
        BLOCKPEDIA_SKIP_TEXTURES: 1
    
    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wasm-build
        path: |
          pkg/*.wasm
          pkg/*.js
          pkg/*.ts
          pkg/package.json

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: cargo bench --all-features

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: target/criterion/*/new/estimates.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true
